{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Bwf72PjhwOIz"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import requests\n",
        "from bs4 import BeautifulSoup"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def scrape_historical_data_tables(url_list):\n",
        "    scraped_data_list = []\n",
        "\n",
        "    for url in url_list:\n",
        "        header = {\"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36\"}\n",
        "\n",
        "        response = requests.get(url, headers=header)\n",
        "        soup = BeautifulSoup(response.content, 'html.parser')\n",
        "\n",
        "        # Find the table containing historical data\n",
        "        table = soup.find('table', {'data-test': 'historical-prices'})\n",
        "\n",
        "\n",
        "        historical_data = {\n",
        "            'Date': [],\n",
        "            'Open': [],\n",
        "            'High': [],\n",
        "            'Low': [],\n",
        "            'Close': [],\n",
        "            'Adj_Close': [],\n",
        "            'Volume': []\n",
        "        }\n",
        "\n",
        "        if table is not None:\n",
        "            # Continue with data extraction\n",
        "            for row in table.find_all('tr'):\n",
        "                cells = row.find_all('td')\n",
        "\n",
        "                if len(cells) == 7:\n",
        "                    date = cells[0].get_text()\n",
        "                    open_price = cells[1].get_text()\n",
        "                    high_price = cells[2].get_text()\n",
        "                    low_price = cells[3].get_text()\n",
        "                    close_price = cells[4].get_text()\n",
        "                    adj_close = cells[5].get_text()\n",
        "                    volume = cells[6].get_text()\n",
        "\n",
        "                    historical_data['Date'].append(date)\n",
        "                    historical_data['Open'].append(open_price)\n",
        "                    historical_data['High'].append(high_price)\n",
        "                    historical_data['Low'].append(low_price)\n",
        "                    historical_data['Close'].append(close_price)\n",
        "                    historical_data['Adj_Close'].append(adj_close)\n",
        "                    historical_data['Volume'].append(volume)\n",
        "        else:\n",
        "            print(f\"Table not found for URL: {url}\")\n",
        "\n",
        "        scraped_data_list.append(historical_data)\n",
        "\n",
        "    return scraped_data_list\n",
        "\n",
        "# List of URLs for historical data on Yahoo Finance\n",
        "urls = [\n",
        "    \"https://uk.finance.yahoo.com/quote/TSLA/history\",\n",
        "    \"https://finance.yahoo.com/quote/BMW.DE/history?p=BMW.DE\",\n",
        "    \"https://finance.yahoo.com/quote/MBG.DE/history?p=MBG.DE\",\n",
        "    \"https://finance.yahoo.com/quote/GM/history?p=GM\"\n",
        "]\n",
        "\n",
        "\n",
        "dataframes_list = scrape_historical_data_tables(urls)\n",
        "\n",
        "\n",
        "dataset_1, dataset_2, dataset_3, dataset_4 = dataframes_list\n",
        "\n",
        "\n",
        "print(\"Dataset 1:\")\n",
        "print(dataset_1)\n",
        "\n",
        "print(\"Dataset 2:\")\n",
        "print(dataset_2)\n",
        "\n",
        "print(\"Dataset 3:\")\n",
        "print(dataset_3)\n",
        "\n",
        "print(\"Dataset 4:\")\n",
        "print(dataset_4)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zoTfrQBWxjo7",
        "outputId": "4f2fa33e-ea9c-4c94-c000-b9e71030d8ac"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataset 1:\n",
            "{'Date': ['29 Aug 2023', '28 Aug 2023', '25 Aug 2023', '24 Aug 2023', '23 Aug 2023', '22 Aug 2023', '21 Aug 2023', '18 Aug 2023', '17 Aug 2023', '16 Aug 2023', '15 Aug 2023', '14 Aug 2023', '11 Aug 2023', '10 Aug 2023', '09 Aug 2023', '08 Aug 2023', '07 Aug 2023', '04 Aug 2023', '03 Aug 2023', '02 Aug 2023', '01 Aug 2023', '31 Jul 2023', '28 Jul 2023', '27 Jul 2023', '26 Jul 2023', '25 Jul 2023', '24 Jul 2023', '21 Jul 2023', '20 Jul 2023', '19 Jul 2023', '18 Jul 2023', '17 Jul 2023', '14 Jul 2023', '13 Jul 2023', '12 Jul 2023', '11 Jul 2023', '10 Jul 2023', '07 Jul 2023', '06 Jul 2023', '05 Jul 2023', '03 Jul 2023', '30 Jun 2023', '29 Jun 2023', '28 Jun 2023', '27 Jun 2023', '26 Jun 2023', '23 Jun 2023', '22 Jun 2023', '21 Jun 2023', '20 Jun 2023', '16 Jun 2023', '15 Jun 2023', '14 Jun 2023', '13 Jun 2023', '12 Jun 2023', '09 Jun 2023', '08 Jun 2023', '07 Jun 2023', '06 Jun 2023', '05 Jun 2023', '02 Jun 2023', '01 Jun 2023', '31 May 2023', '30 May 2023', '26 May 2023', '25 May 2023', '24 May 2023', '23 May 2023', '22 May 2023', '19 May 2023', '18 May 2023', '17 May 2023', '16 May 2023', '15 May 2023', '12 May 2023', '11 May 2023', '10 May 2023', '09 May 2023', '08 May 2023', '05 May 2023', '04 May 2023', '03 May 2023', '02 May 2023', '01 May 2023', '28 Apr 2023', '27 Apr 2023', '26 Apr 2023', '25 Apr 2023', '24 Apr 2023', '21 Apr 2023', '20 Apr 2023', '19 Apr 2023', '18 Apr 2023', '17 Apr 2023', '14 Apr 2023', '13 Apr 2023', '12 Apr 2023', '11 Apr 2023', '10 Apr 2023', '06 Apr 2023'], 'Open': ['238.58', '242.58', '231.31', '238.66', '229.34', '240.25', '221.55', '214.12', '226.06', '228.02', '238.73', '235.70', '241.77', '245.40', '250.87', '247.45', '251.45', '260.97', '252.04', '255.57', '266.26', '267.48', '259.86', '268.31', '263.25', '272.38', '255.85', '268.00', '279.56', '296.04', '290.15', '286.63', '277.01', '274.59', '276.33', '268.65', '276.47', '278.43', '278.09', '278.82', '276.49', '260.60', '258.03', '249.70', '243.24', '250.07', '259.29', '250.77', '275.13', '261.50', '258.92', '248.40', '260.17', '253.51', '247.94', '249.07', '224.22', '228.00', '216.14', '217.80', '210.15', '202.59', '199.78', '200.10', '184.62', '186.54', '182.23', '186.20', '180.70', '177.17', '174.22', '168.41', '165.65', '167.66', '176.07', '168.70', '172.55', '168.95', '173.72', '163.97', '162.71', '160.01', '161.88', '163.17', '160.90', '152.64', '160.29', '159.82', '164.65', '164.80', '166.17', '179.10', '187.15', '186.32', '183.95', '182.96', '190.74', '186.69', '179.94', '183.08'], 'High': ['257.48', '244.38', '239.00', '238.92', '238.98', '240.82', '232.13', '217.58', '226.74', '233.97', '240.50', '240.66', '243.79', '251.80', '251.10', '250.92', '253.65', '264.77', '260.49', '259.52', '266.47', '269.08', '267.25', '269.13', '268.04', '272.90', '269.85', '268.00', '280.93', '299.29', '295.26', '292.23', '285.30', '279.45', '276.52', '270.90', '277.52', '280.78', '279.97', '283.85', '284.25', '264.45', '260.74', '259.88', '250.39', '258.37', '262.45', '265.00', '276.99', '274.75', '263.60', '258.95', '261.57', '259.68', '250.97', '252.42', '235.23', '230.83', '221.91', '221.29', '217.25', '209.80', '203.95', '204.48', '198.60', '186.78', '184.22', '192.96', '189.32', '181.95', '177.06', '174.50', '169.52', '169.76', '177.38', '173.57', '174.43', '169.82', '173.80', '170.79', '162.95', '165.00', '165.49', '163.28', '165.00', '160.48', '160.67', '163.47', '165.65', '166.00', '169.70', '183.50', '187.69', '189.69', '186.28', '186.50', '191.58', '189.19', '185.10', '186.39'], 'Low': ['237.77', '235.35', '230.35', '228.18', '229.29', '229.55', '220.58', '212.36', '218.83', '225.38', '232.61', '233.75', '238.02', '243.00', '241.90', '245.01', '242.76', '253.11', '252.00', '250.49', '260.25', '263.78', '258.23', '255.30', '261.75', '265.00', '254.12', '255.80', '261.20', '289.52', '286.01', '283.57', '276.31', '270.60', '271.46', '266.37', '265.10', '273.77', '272.88', '277.60', '275.11', '259.89', '253.61', '248.89', '240.85', '240.70', '252.80', '248.25', '257.78', '261.12', '257.21', '247.29', '250.50', '251.34', '244.59', '242.02', '223.01', '223.20', '212.53', '214.52', '209.75', '199.37', '195.12', '197.53', '184.53', '180.58', '178.22', '185.26', '180.11', '176.31', '172.45', '167.19', '164.35', '164.55', '167.23', '166.79', '166.68', '166.56', '169.19', '163.51', '159.65', '159.91', '158.93', '158.83', '157.32', '152.37', '153.14', '158.75', '158.61', '161.32', '160.56', '177.65', '183.58', '182.69', '182.01', '180.94', '180.31', '185.65', '176.11', '179.74'], 'Close': ['257.18', '238.82', '238.59', '230.04', '236.86', '233.19', '231.28', '215.49', '219.22', '225.60', '232.96', '239.76', '242.65', '245.34', '242.19', '249.70', '251.45', '253.86', '259.32', '254.11', '261.07', '267.43', '266.44', '255.71', '264.35', '265.28', '269.06', '260.02', '262.90', '291.26', '293.34', '290.38', '281.38', '277.90', '271.99', '269.79', '269.61', '274.43', '276.54', '282.48', '279.82', '261.77', '257.50', '256.24', '250.21', '241.05', '256.60', '264.61', '259.46', '274.45', '260.54', '255.90', '256.79', '258.71', '249.83', '244.40', '234.86', '224.57', '221.31', '217.61', '213.97', '207.52', '203.93', '201.16', '193.17', '184.47', '182.90', '185.77', '188.87', '180.14', '176.89', '173.86', '166.52', '166.35', '167.98', '172.08', '168.54', '169.15', '171.79', '170.06', '161.20', '160.61', '160.31', '161.83', '164.31', '160.19', '153.75', '160.67', '162.55', '165.08', '162.99', '180.59', '184.31', '187.04', '185.00', '185.90', '180.54', '186.79', '184.51', '185.06'], 'Adj_Close': ['257.18', '238.82', '238.59', '230.04', '236.86', '233.19', '231.28', '215.49', '219.22', '225.60', '232.96', '239.76', '242.65', '245.34', '242.19', '249.70', '251.45', '253.86', '259.32', '254.11', '261.07', '267.43', '266.44', '255.71', '264.35', '265.28', '269.06', '260.02', '262.90', '291.26', '293.34', '290.38', '281.38', '277.90', '271.99', '269.79', '269.61', '274.43', '276.54', '282.48', '279.82', '261.77', '257.50', '256.24', '250.21', '241.05', '256.60', '264.61', '259.46', '274.45', '260.54', '255.90', '256.79', '258.71', '249.83', '244.40', '234.86', '224.57', '221.31', '217.61', '213.97', '207.52', '203.93', '201.16', '193.17', '184.47', '182.90', '185.77', '188.87', '180.14', '176.89', '173.86', '166.52', '166.35', '167.98', '172.08', '168.54', '169.15', '171.79', '170.06', '161.20', '160.61', '160.31', '161.83', '164.31', '160.19', '153.75', '160.67', '162.55', '165.08', '162.99', '180.59', '184.31', '187.04', '185.00', '185.90', '180.54', '186.79', '184.51', '185.06'], 'Volume': ['133,146,900', '107,673,700', '106,345,900', '99,777,400', '101,077,600', '130,597,900', '135,702,700', '135,813,700', '120,718,400', '112,484,500', '88,197,600', '98,595,300', '98,866,600', '109,498,600', '101,596,300', '96,642,200', '111,097,900', '99,242,600', '97,569,100', '101,752,900', '83,166,000', '84,582,200', '111,446,000', '103,697,300', '95,856,200', '112,757,300', '136,508,500', '161,050,100', '175,158,300', '142,355,400', '112,434,700', '131,569,600', '119,771,100', '112,681,500', '95,672,100', '91,972,400', '119,425,400', '113,602,000', '120,332,100', '131,530,900', '119,685,900', '112,267,600', '131,283,400', '159,770,800', '164,968,200', '179,990,600', '176,584,100', '166,875,900', '211,797,100', '165,611,200', '167,563,700', '160,171,200', '170,575,500', '162,384,300', '150,337,900', '199,882,300', '164,489,700', '185,710,800', '146,911,600', '151,143,100', '164,129,000', '148,029,900', '150,711,700', '128,818,700', '162,061,500', '96,870,700', '137,605,100', '156,952,100', '132,001,400', '136,024,200', '109,520,300', '125,473,600', '98,288,800', '105,592,500', '157,577,100', '103,889,900', '119,840,700', '88,965,000', '112,249,400', '107,440,900', '95,108,500', '119,728,000', '128,259,700', '109,015,000', '122,515,800', '127,015,200', '153,364,100', '121,999,300', '140,006,600', '123,539,000', '210,970,800', '125,732,700', '92,067,000', '116,662,200', '96,438,700', '112,933,000', '150,256,300', '115,770,900', '142,154,600', '123,857,900']}\n",
            "Dataset 2:\n",
            "{'Date': ['Aug 30, 2023', 'Aug 29, 2023', 'Aug 28, 2023', 'Aug 25, 2023', 'Aug 24, 2023', 'Aug 23, 2023', 'Aug 22, 2023', 'Aug 21, 2023', 'Aug 18, 2023', 'Aug 17, 2023', 'Aug 16, 2023', 'Aug 15, 2023', 'Aug 14, 2023', 'Aug 11, 2023', 'Aug 10, 2023', 'Aug 09, 2023', 'Aug 08, 2023', 'Aug 07, 2023', 'Aug 04, 2023', 'Aug 03, 2023', 'Aug 02, 2023', 'Aug 01, 2023', 'Jul 31, 2023', 'Jul 28, 2023', 'Jul 27, 2023', 'Jul 26, 2023', 'Jul 25, 2023', 'Jul 24, 2023', 'Jul 21, 2023', 'Jul 20, 2023', 'Jul 19, 2023', 'Jul 18, 2023', 'Jul 17, 2023', 'Jul 14, 2023', 'Jul 13, 2023', 'Jul 12, 2023', 'Jul 11, 2023', 'Jul 10, 2023', 'Jul 07, 2023', 'Jul 06, 2023', 'Jul 05, 2023', 'Jul 04, 2023', 'Jul 03, 2023', 'Jun 30, 2023', 'Jun 29, 2023', 'Jun 28, 2023', 'Jun 27, 2023', 'Jun 26, 2023', 'Jun 23, 2023', 'Jun 22, 2023', 'Jun 21, 2023', 'Jun 20, 2023', 'Jun 19, 2023', 'Jun 16, 2023', 'Jun 15, 2023', 'Jun 14, 2023', 'Jun 13, 2023', 'Jun 12, 2023', 'Jun 09, 2023', 'Jun 08, 2023', 'Jun 07, 2023', 'Jun 06, 2023', 'Jun 05, 2023', 'Jun 02, 2023', 'Jun 01, 2023', 'May 31, 2023', 'May 30, 2023', 'May 29, 2023', 'May 26, 2023', 'May 25, 2023', 'May 24, 2023', 'May 23, 2023', 'May 22, 2023', 'May 19, 2023', 'May 18, 2023', 'May 17, 2023', 'May 16, 2023', 'May 15, 2023', 'May 12, 2023', 'May 11, 2023', 'May 10, 2023', 'May 09, 2023', 'May 08, 2023', 'May 05, 2023', 'May 04, 2023', 'May 03, 2023', 'May 02, 2023', 'Apr 28, 2023', 'Apr 27, 2023', 'Apr 26, 2023', 'Apr 25, 2023', 'Apr 24, 2023', 'Apr 21, 2023', 'Apr 20, 2023', 'Apr 19, 2023', 'Apr 18, 2023', 'Apr 17, 2023', 'Apr 14, 2023', 'Apr 13, 2023'], 'Open': ['97.93', '96.79', '97.40', '96.50', '99.07', '99.62', '99.70', '98.37', '98.50', '99.60', '99.19', '100.30', '99.80', '101.32', '101.60', '101.60', '103.16', '-', '103.32', '103.40', '103.24', '110.92', '111.34', '109.50', '107.46', '108.44', '109.32', '107.34', '107.64', '106.82', '107.42', '106.86', '106.40', '107.00', '107.76', '106.96', '107.00', '106.98', '107.90', '112.86', '110.80', '112.42', '112.90', '111.48', '109.90', '108.56', '109.50', '109.20', '109.12', '108.98', '111.10', '110.28', '111.44', '112.42', '112.68', '112.18', '110.30', '-', '108.44', '106.98', '106.84', '106.30', '105.98', '104.02', '-', '102.38', '104.40', '104.88', '103.74', '103.10', '103.90', '-', '103.42', '102.64', '100.50', '99.11', '99.96', '99.88', '100.18', '108.70', '109.32', '109.02', '107.54', '104.00', '102.42', '101.14', '102.00', '101.30', '101.02', '101.62', '101.30', '100.66', '100.52', '103.40', '103.92', '103.50', '104.06', '102.90', '102.58'], 'High': ['98.05', '97.58', '97.55', '97.19', '99.33', '99.90', '100.62', '99.87', '98.80', '99.91', '100.60', '100.32', '100.92', '101.32', '102.60', '102.94', '104.40', '-', '104.46', '104.52', '106.00', '111.70', '111.76', '111.56', '109.96', '108.76', '109.36', '108.62', '108.76', '108.30', '107.62', '107.80', '107.26', '107.14', '107.80', '107.60', '107.06', '108.82', '108.44', '112.86', '112.40', '112.96', '113.12', '113.06', '111.64', '109.92', '109.82', '109.46', '109.20', '109.20', '111.86', '110.82', '111.70', '112.50', '113.00', '113.46', '112.06', '-', '108.92', '108.84', '106.98', '106.74', '106.44', '106.44', '-', '103.98', '105.36', '105.54', '104.56', '103.42', '104.36', '-', '104.24', '104.00', '102.82', '100.36', '100.06', '100.50', '101.12', '108.90', '109.48', '109.54', '109.84', '107.84', '103.80', '101.42', '102.68', '102.12', '102.56', '101.70', '102.02', '101.64', '101.26', '103.40', '104.04', '104.34', '104.48', '104.18', '103.22'], 'Low': ['96.74', '96.48', '95.64', '96.11', '96.70', '98.29', '99.50', '98.35', '97.51', '98.64', '98.73', '98.83', '98.82', '99.85', '101.38', '101.18', '101.14', '-', '102.78', '101.98', '102.94', '103.40', '110.68', '108.62', '105.96', '105.82', '108.14', '106.92', '107.48', '106.72', '106.14', '106.32', '106.10', '105.58', '106.82', '106.54', '105.16', '106.12', '107.04', '107.88', '110.50', '111.10', '111.96', '111.32', '109.90', '107.94', '107.54', '107.46', '107.52', '107.86', '109.70', '109.26', '110.64', '110.54', '111.58', '111.94', '110.22', '-', '107.86', '106.94', '105.46', '105.70', '105.42', '103.72', '-', '101.12', '103.96', '103.66', '102.74', '101.96', '102.12', '-', '103.04', '102.56', '100.48', '99.10', '98.70', '99.58', '99.25', '107.66', '107.58', '108.24', '107.36', '103.38', '100.14', '100.06', '99.92', '98.20', '100.52', '100.26', '100.96', '100.28', '99.38', '98.94', '102.88', '103.10', '102.24', '102.64', '101.82'], 'Close': ['97.08', '97.58', '96.60', '96.51', '96.78', '98.43', '99.70', '99.24', '98.25', '99.10', '99.76', '99.21', '100.10', '99.99', '101.90', '101.36', '101.86', '-', '104.08', '102.98', '105.26', '104.88', '110.86', '111.28', '109.96', '107.16', '108.42', '108.60', '107.58', '107.68', '107.20', '107.10', '106.80', '106.76', '107.00', '107.40', '106.48', '107.48', '107.14', '108.02', '112.40', '111.82', '112.20', '112.52', '111.04', '109.88', '108.06', '109.24', '108.62', '109.10', '109.92', '110.52', '111.02', '111.72', '112.52', '112.90', '112.06', '-', '108.08', '107.96', '106.88', '106.70', '106.44', '106.16', '-', '101.92', '104.18', '104.40', '104.46', '102.78', '102.60', '-', '104.04', '103.38', '102.50', '100.14', '99.57', '100.08', '99.41', '108.40', '108.72', '108.72', '108.92', '107.54', '103.80', '101.02', '100.58', '101.44', '100.64', '101.00', '101.44', '101.16', '100.60', '100.02', '103.78', '104.10', '103.20', '103.68', '102.32'], 'Adj_Close': ['97.08', '97.58', '96.60', '96.51', '96.78', '98.43', '99.70', '99.24', '98.25', '99.10', '99.76', '99.21', '100.10', '99.99', '101.90', '101.36', '101.86', '-', '104.08', '102.98', '105.26', '104.88', '110.86', '111.28', '109.96', '107.16', '108.42', '108.60', '107.58', '107.68', '107.20', '107.10', '106.80', '106.76', '107.00', '107.40', '106.48', '107.48', '107.14', '108.02', '112.40', '111.82', '112.20', '112.52', '111.04', '109.88', '108.06', '109.24', '108.62', '109.10', '109.92', '110.52', '111.02', '111.72', '112.52', '112.90', '112.06', '-', '108.08', '107.96', '106.88', '106.70', '106.44', '106.16', '-', '101.92', '104.18', '104.40', '104.46', '102.78', '102.60', '-', '104.04', '103.38', '102.50', '100.14', '99.57', '100.08', '99.41', '99.90', '100.19', '100.19', '100.38', '99.11', '95.66', '93.10', '92.69', '93.49', '92.75', '93.08', '93.49', '93.23', '92.71', '92.18', '95.64', '95.94', '95.11', '95.55', '94.30'], 'Volume': ['175,367', '790,004', '786,265', '798,291', '923,341', '867,740', '753,422', '737,171', '852,110', '521,139', '806,087', '588,318', '675,959', '1,086,414', '755,306', '673,365', '954,339', '-', '793,499', '1,393,689', '1,149,388', '2,990,049', '702,976', '923,900', '1,121,262', '851,730', '536,559', '724,210', '919,523', '716,073', '789,611', '574,491', '515,501', '807,744', '663,645', '729,269', '1,037,629', '673,649', '1,179,553', '1,237,008', '732,634', '547,810', '573,512', '1,442,529', '786,284', '734,547', '922,281', '751,429', '762,651', '668,475', '685,772', '790,336', '580,786', '2,595,431', '808,875', '937,730', '1,426,285', '-', '566,274', '950,418', '820,752', '660,014', '763,837', '1,351,058', '-', '2,892,934', '668,215', '379,423', '984,483', '792,753', '1,161,218', '-', '730,024', '1,379,891', '1,041,933', '739,114', '896,963', '1,002,346', '2,049,038', '1,877,228', '1,063,634', '1,131,409', '1,304,780', '1,697,673', '-', '956,955', '1,200,497', '1,486,350', '856,419', '850,341', '755,354', '637,324', '1,280,574', '2,036,663', '677,742', '980,641', '1,061,528', '846,092', '849,011']}\n",
            "Dataset 3:\n",
            "{'Date': ['Aug 30, 2023', 'Aug 29, 2023', 'Aug 28, 2023', 'Aug 25, 2023', 'Aug 24, 2023', 'Aug 23, 2023', 'Aug 22, 2023', 'Aug 21, 2023', 'Aug 18, 2023', 'Aug 17, 2023', 'Aug 16, 2023', 'Aug 15, 2023', 'Aug 14, 2023', 'Aug 11, 2023', 'Aug 10, 2023', 'Aug 09, 2023', 'Aug 08, 2023', 'Aug 07, 2023', 'Aug 04, 2023', 'Aug 03, 2023', 'Aug 02, 2023', 'Aug 01, 2023', 'Jul 31, 2023', 'Jul 28, 2023', 'Jul 27, 2023', 'Jul 26, 2023', 'Jul 25, 2023', 'Jul 24, 2023', 'Jul 21, 2023', 'Jul 20, 2023', 'Jul 19, 2023', 'Jul 18, 2023', 'Jul 17, 2023', 'Jul 14, 2023', 'Jul 13, 2023', 'Jul 12, 2023', 'Jul 11, 2023', 'Jul 10, 2023', 'Jul 07, 2023', 'Jul 06, 2023', 'Jul 05, 2023', 'Jul 04, 2023', 'Jul 03, 2023', 'Jun 30, 2023', 'Jun 29, 2023', 'Jun 28, 2023', 'Jun 27, 2023', 'Jun 26, 2023', 'Jun 23, 2023', 'Jun 22, 2023', 'Jun 21, 2023', 'Jun 20, 2023', 'Jun 19, 2023', 'Jun 16, 2023', 'Jun 15, 2023', 'Jun 14, 2023', 'Jun 13, 2023', 'Jun 12, 2023', 'Jun 09, 2023', 'Jun 08, 2023', 'Jun 07, 2023', 'Jun 06, 2023', 'Jun 05, 2023', 'Jun 02, 2023', 'Jun 01, 2023', 'May 31, 2023', 'May 30, 2023', 'May 29, 2023', 'May 26, 2023', 'May 25, 2023', 'May 24, 2023', 'May 23, 2023', 'May 22, 2023', 'May 19, 2023', 'May 18, 2023', 'May 17, 2023', 'May 16, 2023', 'May 15, 2023', 'May 12, 2023', 'May 11, 2023', 'May 10, 2023', 'May 09, 2023', 'May 08, 2023', 'May 05, 2023', 'May 04, 2023', 'May 03, 2023', 'May 02, 2023', 'Apr 28, 2023', 'Apr 27, 2023', 'Apr 26, 2023', 'Apr 25, 2023', 'Apr 24, 2023', 'Apr 21, 2023', 'Apr 20, 2023', 'Apr 19, 2023', 'Apr 18, 2023', 'Apr 17, 2023', 'Apr 14, 2023', 'Apr 13, 2023'], 'Open': ['68.19', '67.51', '67.60', '66.81', '68.10', '68.00', '68.00', '66.85', '67.09', '68.11', '68.00', '68.88', '68.95', '69.99', '70.07', '70.02', '71.04', '-', '71.50', '70.50', '70.04', '72.79', '73.60', '72.98', '69.91', '70.80', '71.90', '71.10', '70.56', '71.50', '72.69', '72.56', '72.03', '72.68', '72.44', '72.54', '72.29', '71.86', '71.35', '73.29', '72.20', '74.00', '73.95', '73.50', '72.90', '72.28', '72.18', '72.24', '72.61', '72.94', '75.31', '75.19', '75.63', '75.13', '75.16', '74.49', '73.99', '-', '73.07', '72.48', '72.09', '71.97', '72.30', '71.25', '-', '70.35', '71.07', '71.50', '70.70', '70.06', '70.75', '-', '71.22', '70.75', '68.90', '67.25', '67.69', '68.00', '68.17', '67.80', '67.59', '66.86', '66.99', '65.15', '66.50', '70.00', '71.20', '70.92', '70.25', '69.75', '69.89', '69.48', '69.60', '70.30', '70.13', '69.56', '70.83', '69.96', '69.40'], 'High': ['68.22', '67.93', '67.74', '67.32', '68.49', '68.31', '68.26', '67.83', '67.15', '68.16', '68.95', '68.97', '69.27', '70.11', '70.74', '70.63', '71.71', '-', '71.78', '71.34', '71.25', '72.84', '73.70', '73.56', '72.96', '71.06', '71.90', '71.49', '71.72', '71.84', '72.79', '72.90', '72.59', '72.74', '73.05', '72.74', '72.42', '72.43', '71.95', '73.33', '73.60', '74.00', '74.47', '73.92', '73.44', '72.76', '72.38', '72.31', '72.61', '72.97', '75.59', '75.33', '75.93', '76.10', '75.22', '75.85', '74.38', '-', '73.41', '73.76', '72.57', '72.24', '72.40', '72.42', '-', '71.00', '71.98', '72.08', '71.44', '70.66', '70.90', '-', '71.60', '71.79', '70.69', '68.45', '67.76', '68.34', '68.30', '68.21', '67.95', '67.38', '67.37', '66.69', '66.64', '70.41', '71.55', '71.31', '71.06', '70.15', '70.15', '70.15', '70.19', '70.30', '70.61', '70.25', '70.91', '70.80', '70.18'], 'Low': ['67.30', '67.24', '66.61', '66.61', '66.88', '67.22', '67.61', '66.77', '66.39', '67.32', '67.84', '68.09', '68.56', '69.11', '69.92', '69.50', '69.58', '-', '70.86', '70.07', '69.66', '70.66', '72.55', '71.78', '68.77', '69.12', '71.01', '70.69', '70.45', '71.27', '71.38', '71.90', '71.84', '72.22', '71.94', '71.94', '71.45', '71.06', '70.88', '71.03', '71.95', '71.89', '73.39', '72.98', '72.73', '71.86', '71.27', '70.58', '71.32', '71.95', '73.98', '74.24', '75.19', '74.83', '74.55', '74.41', '72.50', '-', '72.60', '72.42', '71.52', '71.50', '71.65', '71.01', '-', '69.48', '70.90', '70.96', '70.16', '69.49', '69.58', '-', '70.94', '70.67', '68.81', '67.15', '67.00', '67.77', '67.70', '67.26', '66.84', '66.58', '66.52', '64.99', '64.51', '68.93', '69.56', '68.35', '69.66', '69.10', '69.38', '69.10', '68.31', '67.95', '69.56', '69.42', '69.13', '69.79', '69.13'], 'Close': ['67.56', '67.83', '67.43', '67.00', '66.99', '67.54', '67.79', '67.54', '67.02', '67.52', '68.28', '68.13', '68.84', '69.11', '70.33', '69.50', '70.28', '-', '71.50', '71.16', '71.05', '70.92', '72.64', '73.56', '72.72', '69.96', '71.22', '71.40', '71.20', '71.56', '71.89', '72.47', '72.52', '72.43', '72.80', '72.61', '72.38', '71.91', '71.95', '71.42', '73.57', '72.75', '73.62', '73.67', '72.98', '72.54', '71.83', '71.98', '72.03', '72.35', '74.05', '75.05', '75.54', '76.10', '75.18', '75.35', '74.38', '-', '72.60', '73.00', '72.47', '72.03', '72.04', '72.24', '-', '69.77', '71.20', '71.16', '71.44', '70.25', '69.92', '-', '71.40', '71.18', '70.50', '68.38', '67.40', '68.00', '67.86', '67.77', '67.66', '67.15', '66.68', '66.68', '65.06', '70.25', '69.56', '70.58', '70.06', '70.06', '69.76', '69.89', '69.21', '68.23', '70.61', '70.17', '69.25', '70.41', '69.79'], 'Adj_Close': ['67.56', '67.83', '67.43', '67.00', '66.99', '67.54', '67.79', '67.54', '67.02', '67.52', '68.28', '68.13', '68.84', '69.11', '70.33', '69.50', '70.28', '-', '71.50', '71.16', '71.05', '70.92', '72.64', '73.56', '72.72', '69.96', '71.22', '71.40', '71.20', '71.56', '71.89', '72.47', '72.52', '72.43', '72.80', '72.61', '72.38', '71.91', '71.95', '71.42', '73.57', '72.75', '73.62', '73.67', '72.98', '72.54', '71.83', '71.98', '72.03', '72.35', '74.05', '75.05', '75.54', '76.10', '75.18', '75.35', '74.38', '-', '72.60', '73.00', '72.47', '72.03', '72.04', '72.24', '-', '69.77', '71.20', '71.16', '71.44', '70.25', '69.92', '-', '71.40', '71.18', '70.50', '68.38', '67.40', '68.00', '67.86', '67.77', '67.66', '67.15', '66.68', '66.68', '65.06', '65.05', '64.41', '65.36', '64.87', '64.87', '64.60', '64.72', '64.09', '63.18', '65.38', '64.98', '64.12', '65.20', '64.62'], 'Volume': ['682,915', '2,263,590', '1,847,514', '1,411,722', '1,921,427', '1,797,299', '1,279,950', '1,734,287', '2,654,962', '1,978,472', '1,558,031', '1,639,229', '1,957,208', '2,450,747', '1,903,057', '1,733,233', '2,394,838', '-', '1,571,767', '2,051,658', '1,997,851', '3,075,871', '1,939,953', '2,522,824', '4,881,783', '3,825,392', '1,363,722', '1,834,338', '2,682,292', '1,984,640', '1,739,005', '1,476,416', '1,318,088', '1,403,461', '2,193,914', '2,075,037', '1,577,401', '1,165,077', '2,193,616', '2,696,415', '2,170,925', '1,704,565', '1,667,671', '2,983,542', '1,359,574', '1,666,174', '2,047,053', '2,108,434', '2,021,890', '2,615,289', '2,441,517', '1,844,673', '1,454,192', '9,064,187', '2,180,019', '3,412,044', '2,562,255', '-', '1,472,053', '2,603,334', '2,140,621', '1,293,109', '1,675,542', '3,128,986', '-', '9,349,162', '1,836,543', '1,509,671', '2,199,584', '1,966,352', '2,779,971', '-', '1,878,847', '4,060,785', '3,489,030', '2,414,124', '2,505,551', '1,655,858', '2,180,549', '2,752,091', '2,685,946', '2,778,602', '2,022,023', '3,347,560', '4,895,234', '4,057,074', '3,619,970', '4,484,728', '2,705,371', '2,143,895', '2,010,841', '1,951,192', '4,229,716', '4,028,108', '2,085,092', '2,710,343', '2,327,453', '2,400,954', '1,779,787']}\n",
            "Dataset 4:\n",
            "{'Date': ['Aug 29, 2023', 'Aug 28, 2023', 'Aug 25, 2023', 'Aug 24, 2023', 'Aug 23, 2023', 'Aug 22, 2023', 'Aug 21, 2023', 'Aug 18, 2023', 'Aug 17, 2023', 'Aug 16, 2023', 'Aug 15, 2023', 'Aug 14, 2023', 'Aug 11, 2023', 'Aug 10, 2023', 'Aug 09, 2023', 'Aug 08, 2023', 'Aug 07, 2023', 'Aug 04, 2023', 'Aug 03, 2023', 'Aug 02, 2023', 'Aug 01, 2023', 'Jul 31, 2023', 'Jul 28, 2023', 'Jul 27, 2023', 'Jul 26, 2023', 'Jul 25, 2023', 'Jul 24, 2023', 'Jul 21, 2023', 'Jul 20, 2023', 'Jul 19, 2023', 'Jul 18, 2023', 'Jul 17, 2023', 'Jul 14, 2023', 'Jul 13, 2023', 'Jul 12, 2023', 'Jul 11, 2023', 'Jul 10, 2023', 'Jul 07, 2023', 'Jul 06, 2023', 'Jul 05, 2023', 'Jul 03, 2023', 'Jun 30, 2023', 'Jun 29, 2023', 'Jun 28, 2023', 'Jun 27, 2023', 'Jun 26, 2023', 'Jun 23, 2023', 'Jun 22, 2023', 'Jun 21, 2023', 'Jun 20, 2023', 'Jun 16, 2023', 'Jun 15, 2023', 'Jun 14, 2023', 'Jun 13, 2023', 'Jun 12, 2023', 'Jun 09, 2023', 'Jun 08, 2023', 'Jun 07, 2023', 'Jun 06, 2023', 'Jun 05, 2023', 'Jun 02, 2023', 'Jun 01, 2023', 'May 31, 2023', 'May 30, 2023', 'May 26, 2023', 'May 25, 2023', 'May 24, 2023', 'May 23, 2023', 'May 22, 2023', 'May 19, 2023', 'May 18, 2023', 'May 17, 2023', 'May 16, 2023', 'May 15, 2023', 'May 12, 2023', 'May 11, 2023', 'May 10, 2023', 'May 09, 2023', 'May 08, 2023', 'May 05, 2023', 'May 04, 2023', 'May 03, 2023', 'May 02, 2023', 'May 01, 2023', 'Apr 28, 2023', 'Apr 27, 2023', 'Apr 26, 2023', 'Apr 25, 2023', 'Apr 24, 2023', 'Apr 21, 2023', 'Apr 20, 2023', 'Apr 19, 2023', 'Apr 18, 2023', 'Apr 17, 2023', 'Apr 14, 2023', 'Apr 13, 2023', 'Apr 12, 2023', 'Apr 11, 2023', 'Apr 10, 2023'], 'Open': ['33.22', '33.26', '33.07', '33.40', '32.84', '33.47', '33.25', '32.58', '33.07', '33.15', '33.60', '33.45', '34.03', '36.30', '36.50', '36.28', '36.83', '36.85', '37.19', '37.63', '38.04', '38.15', '38.75', '38.73', '37.96', '37.73', '38.87', '39.64', '38.97', '39.30', '38.74', '39.48', '40.61', '40.72', '40.84', '39.57', '39.58', '39.54', '38.92', '39.10', '38.74', '38.31', '38.33', '37.50', '37.01', '36.03', '35.93', '36.78', '37.31', '37.70', '38.12', '37.19', '37.84', '36.96', '36.27', '37.49', '36.20', '35.39', '34.00', '34.45', '33.66', '32.49', '32.95', '33.70', '32.62', '32.16', '33.00', '33.00', '32.71', '33.12', '32.28', '31.81', '32.06', '32.39', '33.25', '32.85', '33.87', '33.32', '33.39', '32.32', '32.30', '32.76', '33.20', '34.00', '32.42', '32.36', '32.90', '33.99', '33.77', '33.53', '33.28', '34.87', '35.45', '34.38', '34.75', '34.56', '35.99', '35.88', '34.35'], 'High': ['33.51', '33.45', '33.30', '33.58', '33.57', '33.48', '33.41', '33.20', '33.33', '33.28', '33.78', '34.21', '34.17', '36.36', '36.81', '36.88', '37.10', '37.09', '37.19', '37.83', '38.36', '38.37', '38.98', '39.45', '38.45', '38.78', '39.48', '39.67', '39.33', '39.58', '39.19', '39.54', '40.70', '41.04', '40.97', '40.10', '39.75', '39.98', '39.47', '39.54', '39.14', '38.86', '38.62', '38.21', '37.52', '36.99', '36.44', '36.96', '37.31', '37.84', '38.25', '38.26', '37.97', '37.84', '37.02', '38.17', '36.44', '36.46', '35.38', '34.45', '34.48', '33.30', '33.05', '34.28', '33.49', '32.64', '33.04', '33.84', '32.93', '33.17', '32.96', '32.59', '32.24', '32.47', '33.28', '33.28', '33.97', '33.57', '33.74', '33.40', '32.67', '33.39', '33.41', '34.28', '33.30', '32.82', '33.12', '34.08', '34.40', '33.77', '33.73', '34.88', '35.57', '35.15', '35.29', '34.69', '36.06', '35.97', '35.74'], 'Low': ['33.08', '32.93', '32.05', '32.76', '32.76', '32.85', '32.98', '32.57', '32.76', '32.71', '33.22', '33.42', '33.42', '34.00', '36.21', '36.10', '36.36', '36.37', '36.63', '37.26', '37.90', '37.80', '37.74', '38.53', '37.64', '37.11', '38.76', '38.34', '38.72', '39.16', '38.55', '38.51', '39.94', '40.41', '40.38', '39.16', '39.19', '39.32', '38.60', '38.91', '38.63', '38.00', '38.00', '37.41', '36.45', '36.03', '35.80', '36.36', '36.88', '36.92', '37.65', '37.18', '37.04', '36.96', '36.26', '36.23', '35.68', '35.23', '33.98', '33.66', '33.47', '32.14', '31.86', '33.32', '32.35', '32.13', '32.01', '32.94', '32.39', '32.49', '32.25', '31.64', '31.50', '32.12', '32.13', '32.85', '32.60', '33.06', '33.13', '32.21', '31.56', '32.37', '32.51', '33.44', '32.41', '31.84', '32.08', '32.68', '33.56', '32.97', '32.84', '34.22', '35.07', '34.33', '34.25', '33.72', '34.53', '35.34', '34.26'], 'Close': ['33.46', '33.12', '32.95', '32.88', '33.56', '32.93', '33.27', '33.12', '32.92', '32.82', '33.30', '34.07', '33.89', '34.16', '36.26', '36.84', '37.09', '36.57', '36.92', '37.39', '38.12', '38.37', '38.05', '38.97', '38.29', '37.92', '39.30', '38.55', '39.26', '39.23', '39.13', '38.75', '40.00', '40.50', '40.41', '39.97', '39.64', '39.61', '39.46', '39.42', '38.96', '38.56', '38.20', '38.19', '37.48', '36.70', '36.18', '36.66', '37.01', '37.32', '37.96', '38.03', '37.36', '37.65', '36.67', '36.23', '35.85', '36.22', '35.24', '34.13', '34.28', '33.02', '32.41', '33.36', '33.29', '32.41', '32.28', '33.42', '32.86', '32.66', '32.90', '32.44', '31.54', '32.37', '32.40', '33.12', '33.08', '33.28', '33.66', '33.26', '31.69', '32.48', '33.08', '33.48', '33.04', '32.72', '32.22', '32.91', '34.29', '33.55', '33.54', '34.58', '35.33', '35.14', '34.49', '34.53', '34.62', '35.41', '35.73'], 'Adj_Close': ['33.46', '33.12', '32.95', '32.88', '33.56', '32.93', '33.27', '33.12', '32.92', '32.82', '33.30', '34.07', '33.89', '34.16', '36.26', '36.84', '37.09', '36.57', '36.92', '37.39', '38.12', '38.37', '38.05', '38.97', '38.29', '37.92', '39.30', '38.55', '39.26', '39.23', '39.13', '38.75', '40.00', '40.50', '40.41', '39.97', '39.64', '39.61', '39.46', '39.42', '38.96', '38.56', '38.20', '38.19', '37.48', '36.70', '36.18', '36.66', '37.01', '37.32', '37.96', '38.03', '37.36', '37.65', '36.67', '36.23', '35.85', '36.22', '35.24', '34.13', '34.28', '33.02', '32.32', '33.27', '33.20', '32.32', '32.19', '33.33', '32.77', '32.57', '32.81', '32.35', '31.45', '32.28', '32.31', '33.03', '32.99', '33.19', '33.57', '33.17', '31.60', '32.39', '32.99', '33.39', '32.95', '32.63', '32.13', '32.82', '34.19', '33.46', '33.45', '34.48', '35.23', '35.04', '34.39', '34.43', '34.52', '35.31', '35.63'], 'Volume': ['7,509,500', '7,393,500', '14,295,900', '7,875,600', '10,262,700', '8,634,600', '10,766,100', '11,778,200', '11,476,100', '15,254,600', '13,365,800', '15,853,800', '20,514,200', '25,601,500', '8,254,500', '10,281,700', '9,910,700', '12,405,300', '14,754,800', '15,516,400', '10,232,100', '12,138,200', '17,473,700', '17,589,300', '15,673,500', '30,599,100', '18,209,200', '13,619,500', '10,626,400', '12,775,300', '13,306,900', '16,143,000', '11,044,500', '12,446,400', '14,534,200', '11,399,600', '10,507,300', '10,604,100', '13,108,100', '12,110,000', '5,578,300', '11,612,500', '10,460,300', '12,882,100', '9,125,200', '11,904,900', '10,153,500', '8,616,300', '9,085,800', '14,380,100', '14,518,700', '15,692,500', '14,879,200', '16,449,900', '14,901,900', '24,307,400', '16,196,100', '23,167,200', '15,596,900', '10,067,800', '15,308,500', '12,466,700', '17,934,200', '12,671,700', '13,656,800', '10,492,700', '13,357,500', '17,717,900', '8,866,400', '12,598,700', '14,241,000', '11,269,500', '11,069,600', '18,841,100', '13,026,000', '12,319,500', '15,418,400', '11,841,900', '11,267,400', '17,183,400', '14,807,400', '13,494,400', '14,527,600', '16,892,300', '15,510,700', '19,730,100', '18,780,900', '34,044,400', '16,836,800', '12,358,700', '15,294,800', '11,002,300', '9,444,600', '10,248,900', '9,162,900', '16,066,200', '12,027,400', '16,410,500', '11,530,400']}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset_1 = pd.DataFrame.from_dict(dataset_1)\n",
        "dataset_2 = pd.DataFrame.from_dict(dataset_2)\n",
        "dataset_3 = pd.DataFrame.from_dict(dataset_3)\n",
        "dataset_4 = pd.DataFrame.from_dict(dataset_4)"
      ],
      "metadata": {
        "id": "nhbFcKR-BItM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dataset_1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "msJDeEyhBNXb",
        "outputId": "c9d31d62-b988-48d4-8c71-8ddab4a30d2f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           Date    Open    High     Low   Close Adj_Close       Volume\n",
              "0   29 Aug 2023  238.58  257.48  237.77  257.18    257.18  133,146,900\n",
              "1   28 Aug 2023  242.58  244.38  235.35  238.82    238.82  107,673,700\n",
              "2   25 Aug 2023  231.31  239.00  230.35  238.59    238.59  106,345,900\n",
              "3   24 Aug 2023  238.66  238.92  228.18  230.04    230.04   99,777,400\n",
              "4   23 Aug 2023  229.34  238.98  229.29  236.86    236.86  101,077,600\n",
              "..          ...     ...     ...     ...     ...       ...          ...\n",
              "95  13 Apr 2023  182.96  186.50  180.94  185.90    185.90  112,933,000\n",
              "96  12 Apr 2023  190.74  191.58  180.31  180.54    180.54  150,256,300\n",
              "97  11 Apr 2023  186.69  189.19  185.65  186.79    186.79  115,770,900\n",
              "98  10 Apr 2023  179.94  185.10  176.11  184.51    184.51  142,154,600\n",
              "99  06 Apr 2023  183.08  186.39  179.74  185.06    185.06  123,857,900\n",
              "\n",
              "[100 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d02d3db4-92a3-436c-813d-d8a1fe5487d8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj_Close</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>29 Aug 2023</td>\n",
              "      <td>238.58</td>\n",
              "      <td>257.48</td>\n",
              "      <td>237.77</td>\n",
              "      <td>257.18</td>\n",
              "      <td>257.18</td>\n",
              "      <td>133,146,900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>28 Aug 2023</td>\n",
              "      <td>242.58</td>\n",
              "      <td>244.38</td>\n",
              "      <td>235.35</td>\n",
              "      <td>238.82</td>\n",
              "      <td>238.82</td>\n",
              "      <td>107,673,700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>25 Aug 2023</td>\n",
              "      <td>231.31</td>\n",
              "      <td>239.00</td>\n",
              "      <td>230.35</td>\n",
              "      <td>238.59</td>\n",
              "      <td>238.59</td>\n",
              "      <td>106,345,900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>24 Aug 2023</td>\n",
              "      <td>238.66</td>\n",
              "      <td>238.92</td>\n",
              "      <td>228.18</td>\n",
              "      <td>230.04</td>\n",
              "      <td>230.04</td>\n",
              "      <td>99,777,400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>23 Aug 2023</td>\n",
              "      <td>229.34</td>\n",
              "      <td>238.98</td>\n",
              "      <td>229.29</td>\n",
              "      <td>236.86</td>\n",
              "      <td>236.86</td>\n",
              "      <td>101,077,600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>95</th>\n",
              "      <td>13 Apr 2023</td>\n",
              "      <td>182.96</td>\n",
              "      <td>186.50</td>\n",
              "      <td>180.94</td>\n",
              "      <td>185.90</td>\n",
              "      <td>185.90</td>\n",
              "      <td>112,933,000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96</th>\n",
              "      <td>12 Apr 2023</td>\n",
              "      <td>190.74</td>\n",
              "      <td>191.58</td>\n",
              "      <td>180.31</td>\n",
              "      <td>180.54</td>\n",
              "      <td>180.54</td>\n",
              "      <td>150,256,300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>11 Apr 2023</td>\n",
              "      <td>186.69</td>\n",
              "      <td>189.19</td>\n",
              "      <td>185.65</td>\n",
              "      <td>186.79</td>\n",
              "      <td>186.79</td>\n",
              "      <td>115,770,900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>10 Apr 2023</td>\n",
              "      <td>179.94</td>\n",
              "      <td>185.10</td>\n",
              "      <td>176.11</td>\n",
              "      <td>184.51</td>\n",
              "      <td>184.51</td>\n",
              "      <td>142,154,600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99</th>\n",
              "      <td>06 Apr 2023</td>\n",
              "      <td>183.08</td>\n",
              "      <td>186.39</td>\n",
              "      <td>179.74</td>\n",
              "      <td>185.06</td>\n",
              "      <td>185.06</td>\n",
              "      <td>123,857,900</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>100 rows × 7 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d02d3db4-92a3-436c-813d-d8a1fe5487d8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d02d3db4-92a3-436c-813d-d8a1fe5487d8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d02d3db4-92a3-436c-813d-d8a1fe5487d8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0fa4bb03-dd27-4c8d-aa65-28153d2f25f5\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0fa4bb03-dd27-4c8d-aa65-28153d2f25f5')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0fa4bb03-dd27-4c8d-aa65-28153d2f25f5 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset_1['Date'] = pd.to_datetime(dataset_1['Date'], format='%d %b %Y')\n",
        "dataset_2['Date'] = pd.to_datetime(dataset_2['Date'], format='%b %d, %Y')\n",
        "dataset_3['Date'] = pd.to_datetime(dataset_3['Date'], format='%b %d, %Y')\n",
        "dataset_4['Date'] = pd.to_datetime(dataset_4['Date'], format='%b %d, %Y')"
      ],
      "metadata": {
        "id": "glIl3bKtRRjt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dataset_4"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "Qs8vzdgmyWHk",
        "outputId": "ae6b9123-decc-4302-a6a7-19f2ea3ff611"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         Date   Open   High    Low  Close Adj_Close      Volume\n",
              "0  2023-08-29  33.22  33.51  33.08  33.46     33.46   7,509,500\n",
              "1  2023-08-28  33.26  33.45  32.93  33.12     33.12   7,393,500\n",
              "2  2023-08-25  33.07  33.30  32.05  32.95     32.95  14,295,900\n",
              "3  2023-08-24  33.40  33.58  32.76  32.88     32.88   7,875,600\n",
              "4  2023-08-23  32.84  33.57  32.76  33.56     33.56  10,262,700\n",
              "..        ...    ...    ...    ...    ...       ...         ...\n",
              "94 2023-04-14  34.75  35.29  34.25  34.49     34.39   9,162,900\n",
              "95 2023-04-13  34.56  34.69  33.72  34.53     34.43  16,066,200\n",
              "96 2023-04-12  35.99  36.06  34.53  34.62     34.52  12,027,400\n",
              "97 2023-04-11  35.88  35.97  35.34  35.41     35.31  16,410,500\n",
              "98 2023-04-10  34.35  35.74  34.26  35.73     35.63  11,530,400\n",
              "\n",
              "[99 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f2d0bcf6-a8c0-40e1-8d6e-adb7dc319c5c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj_Close</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2023-08-29</td>\n",
              "      <td>33.22</td>\n",
              "      <td>33.51</td>\n",
              "      <td>33.08</td>\n",
              "      <td>33.46</td>\n",
              "      <td>33.46</td>\n",
              "      <td>7,509,500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2023-08-28</td>\n",
              "      <td>33.26</td>\n",
              "      <td>33.45</td>\n",
              "      <td>32.93</td>\n",
              "      <td>33.12</td>\n",
              "      <td>33.12</td>\n",
              "      <td>7,393,500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2023-08-25</td>\n",
              "      <td>33.07</td>\n",
              "      <td>33.30</td>\n",
              "      <td>32.05</td>\n",
              "      <td>32.95</td>\n",
              "      <td>32.95</td>\n",
              "      <td>14,295,900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2023-08-24</td>\n",
              "      <td>33.40</td>\n",
              "      <td>33.58</td>\n",
              "      <td>32.76</td>\n",
              "      <td>32.88</td>\n",
              "      <td>32.88</td>\n",
              "      <td>7,875,600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2023-08-23</td>\n",
              "      <td>32.84</td>\n",
              "      <td>33.57</td>\n",
              "      <td>32.76</td>\n",
              "      <td>33.56</td>\n",
              "      <td>33.56</td>\n",
              "      <td>10,262,700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>94</th>\n",
              "      <td>2023-04-14</td>\n",
              "      <td>34.75</td>\n",
              "      <td>35.29</td>\n",
              "      <td>34.25</td>\n",
              "      <td>34.49</td>\n",
              "      <td>34.39</td>\n",
              "      <td>9,162,900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>95</th>\n",
              "      <td>2023-04-13</td>\n",
              "      <td>34.56</td>\n",
              "      <td>34.69</td>\n",
              "      <td>33.72</td>\n",
              "      <td>34.53</td>\n",
              "      <td>34.43</td>\n",
              "      <td>16,066,200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96</th>\n",
              "      <td>2023-04-12</td>\n",
              "      <td>35.99</td>\n",
              "      <td>36.06</td>\n",
              "      <td>34.53</td>\n",
              "      <td>34.62</td>\n",
              "      <td>34.52</td>\n",
              "      <td>12,027,400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>2023-04-11</td>\n",
              "      <td>35.88</td>\n",
              "      <td>35.97</td>\n",
              "      <td>35.34</td>\n",
              "      <td>35.41</td>\n",
              "      <td>35.31</td>\n",
              "      <td>16,410,500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>2023-04-10</td>\n",
              "      <td>34.35</td>\n",
              "      <td>35.74</td>\n",
              "      <td>34.26</td>\n",
              "      <td>35.73</td>\n",
              "      <td>35.63</td>\n",
              "      <td>11,530,400</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>99 rows × 7 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f2d0bcf6-a8c0-40e1-8d6e-adb7dc319c5c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f2d0bcf6-a8c0-40e1-8d6e-adb7dc319c5c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f2d0bcf6-a8c0-40e1-8d6e-adb7dc319c5c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4a27295f-14de-4df9-8e0f-9edf0a00c310\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4a27295f-14de-4df9-8e0f-9edf0a00c310')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4a27295f-14de-4df9-8e0f-9edf0a00c310 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset_1.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "QC3xqwgHRP18",
        "outputId": "4bf92de1-0f4f-42db-8cde-b0567064e157"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         Date    Open    High     Low   Close Adj_Close       Volume\n",
              "95 2023-04-13  182.96  186.50  180.94  185.90    185.90  112,933,000\n",
              "96 2023-04-12  190.74  191.58  180.31  180.54    180.54  150,256,300\n",
              "97 2023-04-11  186.69  189.19  185.65  186.79    186.79  115,770,900\n",
              "98 2023-04-10  179.94  185.10  176.11  184.51    184.51  142,154,600\n",
              "99 2023-04-06  183.08  186.39  179.74  185.06    185.06  123,857,900"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f050f111-f3ea-4be5-a3ba-002d4a4ceb6d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj_Close</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>95</th>\n",
              "      <td>2023-04-13</td>\n",
              "      <td>182.96</td>\n",
              "      <td>186.50</td>\n",
              "      <td>180.94</td>\n",
              "      <td>185.90</td>\n",
              "      <td>185.90</td>\n",
              "      <td>112,933,000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96</th>\n",
              "      <td>2023-04-12</td>\n",
              "      <td>190.74</td>\n",
              "      <td>191.58</td>\n",
              "      <td>180.31</td>\n",
              "      <td>180.54</td>\n",
              "      <td>180.54</td>\n",
              "      <td>150,256,300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>2023-04-11</td>\n",
              "      <td>186.69</td>\n",
              "      <td>189.19</td>\n",
              "      <td>185.65</td>\n",
              "      <td>186.79</td>\n",
              "      <td>186.79</td>\n",
              "      <td>115,770,900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>2023-04-10</td>\n",
              "      <td>179.94</td>\n",
              "      <td>185.10</td>\n",
              "      <td>176.11</td>\n",
              "      <td>184.51</td>\n",
              "      <td>184.51</td>\n",
              "      <td>142,154,600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99</th>\n",
              "      <td>2023-04-06</td>\n",
              "      <td>183.08</td>\n",
              "      <td>186.39</td>\n",
              "      <td>179.74</td>\n",
              "      <td>185.06</td>\n",
              "      <td>185.06</td>\n",
              "      <td>123,857,900</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f050f111-f3ea-4be5-a3ba-002d4a4ceb6d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f050f111-f3ea-4be5-a3ba-002d4a4ceb6d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f050f111-f3ea-4be5-a3ba-002d4a4ceb6d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c01f84d8-f8e9-4b30-afd0-bd9d394b19d0\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c01f84d8-f8e9-4b30-afd0-bd9d394b19d0')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c01f84d8-f8e9-4b30-afd0-bd9d394b19d0 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import yfinance as yf\n",
        "from datetime import datetime, timedelta\n",
        "\n",
        "def collect_historical_data(symbol, end_date):\n",
        "\n",
        "    start_date = end_date - timedelta(days=366)\n",
        "\n",
        "    historical_data = yf.download(symbol, start=start_date, end=end_date)\n",
        "    return historical_data\n",
        "\n",
        "end_date = datetime(2023, 4, 6)\n",
        "\n",
        "\n",
        "TSLA_data_1 = collect_historical_data(\"TSLA\", end_date)\n",
        "BMW_data_1 = collect_historical_data(\"BMW.DE\", end_date)\n",
        "MBG_data_1 = collect_historical_data(\"MBG.DE\", end_date)\n",
        "GM_data_1 = collect_historical_data(\"GM\", end_date)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "V5rvnTEV0HpC",
        "outputId": "6a246ea9-ac63-43a6-ee7f-ff23bb43272a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[*********************100%%**********************]  1 of 1 completed\n",
            "[*********************100%%**********************]  1 of 1 completed\n",
            "[*********************100%%**********************]  1 of 1 completed\n",
            "[*********************100%%**********************]  1 of 1 completed\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "GM_data_1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 455
        },
        "id": "bofrqdNvO7Bd",
        "outputId": "4e4d4172-dece-43a6-9552-307fed963998"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                 Open       High        Low      Close  Adj Close    Volume\n",
              "Date                                                                       \n",
              "2022-04-05  42.959999  43.160000  41.320000  41.419998  41.023865  19853900\n",
              "2022-04-06  40.790001  41.330002  39.480000  39.500000  39.122227  29254900\n",
              "2022-04-07  39.290001  39.529999  37.599998  38.720001  38.349693  28297600\n",
              "2022-04-08  38.349998  40.049999  38.169998  39.349998  38.973667  22086800\n",
              "2022-04-11  38.810001  41.340000  38.689999  40.330002  39.944294  25015300\n",
              "...               ...        ...        ...        ...        ...       ...\n",
              "2023-03-30  36.250000  36.480000  35.869999  35.990002  35.890060   9300200\n",
              "2023-03-31  36.270000  36.720001  36.130001  36.680000  36.578144  10872700\n",
              "2023-04-03  36.380001  36.820000  35.990002  36.270000  36.169281  10887900\n",
              "2023-04-04  36.509998  36.540001  35.290001  35.740002  35.640755  11279900\n",
              "2023-04-05  35.270000  35.380001  34.400002  35.090000  34.992558  10949400\n",
              "\n",
              "[252 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-14a7c419-0e5c-4329-ad80-e60a21c094de\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2022-04-05</th>\n",
              "      <td>42.959999</td>\n",
              "      <td>43.160000</td>\n",
              "      <td>41.320000</td>\n",
              "      <td>41.419998</td>\n",
              "      <td>41.023865</td>\n",
              "      <td>19853900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-04-06</th>\n",
              "      <td>40.790001</td>\n",
              "      <td>41.330002</td>\n",
              "      <td>39.480000</td>\n",
              "      <td>39.500000</td>\n",
              "      <td>39.122227</td>\n",
              "      <td>29254900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-04-07</th>\n",
              "      <td>39.290001</td>\n",
              "      <td>39.529999</td>\n",
              "      <td>37.599998</td>\n",
              "      <td>38.720001</td>\n",
              "      <td>38.349693</td>\n",
              "      <td>28297600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-04-08</th>\n",
              "      <td>38.349998</td>\n",
              "      <td>40.049999</td>\n",
              "      <td>38.169998</td>\n",
              "      <td>39.349998</td>\n",
              "      <td>38.973667</td>\n",
              "      <td>22086800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-04-11</th>\n",
              "      <td>38.810001</td>\n",
              "      <td>41.340000</td>\n",
              "      <td>38.689999</td>\n",
              "      <td>40.330002</td>\n",
              "      <td>39.944294</td>\n",
              "      <td>25015300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-03-30</th>\n",
              "      <td>36.250000</td>\n",
              "      <td>36.480000</td>\n",
              "      <td>35.869999</td>\n",
              "      <td>35.990002</td>\n",
              "      <td>35.890060</td>\n",
              "      <td>9300200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-03-31</th>\n",
              "      <td>36.270000</td>\n",
              "      <td>36.720001</td>\n",
              "      <td>36.130001</td>\n",
              "      <td>36.680000</td>\n",
              "      <td>36.578144</td>\n",
              "      <td>10872700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-04-03</th>\n",
              "      <td>36.380001</td>\n",
              "      <td>36.820000</td>\n",
              "      <td>35.990002</td>\n",
              "      <td>36.270000</td>\n",
              "      <td>36.169281</td>\n",
              "      <td>10887900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-04-04</th>\n",
              "      <td>36.509998</td>\n",
              "      <td>36.540001</td>\n",
              "      <td>35.290001</td>\n",
              "      <td>35.740002</td>\n",
              "      <td>35.640755</td>\n",
              "      <td>11279900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-04-05</th>\n",
              "      <td>35.270000</td>\n",
              "      <td>35.380001</td>\n",
              "      <td>34.400002</td>\n",
              "      <td>35.090000</td>\n",
              "      <td>34.992558</td>\n",
              "      <td>10949400</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>252 rows × 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-14a7c419-0e5c-4329-ad80-e60a21c094de')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-14a7c419-0e5c-4329-ad80-e60a21c094de button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-14a7c419-0e5c-4329-ad80-e60a21c094de');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f0cbef27-418e-40d9-9a6f-eb43d40141b4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f0cbef27-418e-40d9-9a6f-eb43d40141b4')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f0cbef27-418e-40d9-9a6f-eb43d40141b4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "TSLA_data_1 = TSLA_data_1.reset_index()\n",
        "TSLA_data_1.rename(columns={'Adj Close': 'Adj_Close'}, inplace=True)"
      ],
      "metadata": {
        "id": "scD9wBnKPIJt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "BMW_data_1 = BMW_data_1.reset_index()\n",
        "BMW_data_1.rename(columns={'Adj Close': 'Adj_Close'}, inplace=True)"
      ],
      "metadata": {
        "id": "DpS-BKSuQ3Wi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "MBG_data_1 = MBG_data_1.reset_index()\n",
        "MBG_data_1.rename(columns={'Adj Close': 'Adj_Close'}, inplace=True)"
      ],
      "metadata": {
        "id": "kbDLA7ZRQ5WU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "GM_data_1 = GM_data_1.reset_index()\n",
        "GM_data_1.rename(columns={'Adj Close': 'Adj_Close'}, inplace=True)"
      ],
      "metadata": {
        "id": "I7Hg-A-7Q5J2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dataset_1 = TSLA_data_1.append(dataset_1, ignore_index=True)\n",
        "dataset_2 = BMW_data_1.append(dataset_2, ignore_index=True)\n",
        "dataset_3 = MBG_data_1.append(dataset_3, ignore_index=True)\n",
        "dataset_4 = GM_data_1.append(dataset_4, ignore_index=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "c80P_onjRHOk",
        "outputId": "9e420ac7-ffc4-4deb-fc47-e21369c5c161"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-30-17af4a0751ac>:1: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  dataset_1 = TSLA_data_1.append(dataset_1, ignore_index=True)\n",
            "<ipython-input-30-17af4a0751ac>:2: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  dataset_2 = BMW_data_1.append(dataset_2, ignore_index=True)\n",
            "<ipython-input-30-17af4a0751ac>:3: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  dataset_3 = MBG_data_1.append(dataset_3, ignore_index=True)\n",
            "<ipython-input-30-17af4a0751ac>:4: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n",
            "  dataset_4 = GM_data_1.append(dataset_4, ignore_index=True)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset_4"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "VhBGQz6jRuQr",
        "outputId": "8a771053-05c8-4b1a-b8cf-4321f4439928"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          Date       Open       High        Low      Close  Adj_Close  \\\n",
              "0   2022-04-05  42.959999      43.16      41.32  41.419998  41.023865   \n",
              "1   2022-04-06  40.790001  41.330002      39.48       39.5  39.122227   \n",
              "2   2022-04-07  39.290001  39.529999  37.599998  38.720001  38.349693   \n",
              "3   2022-04-08  38.349998  40.049999  38.169998  39.349998  38.973667   \n",
              "4   2022-04-11  38.810001      41.34  38.689999  40.330002  39.944294   \n",
              "..         ...        ...        ...        ...        ...        ...   \n",
              "346 2023-04-14      34.75      35.29      34.25      34.49      34.39   \n",
              "347 2023-04-13      34.56      34.69      33.72      34.53      34.43   \n",
              "348 2023-04-12      35.99      36.06      34.53      34.62      34.52   \n",
              "349 2023-04-11      35.88      35.97      35.34      35.41      35.31   \n",
              "350 2023-04-10      34.35      35.74      34.26      35.73      35.63   \n",
              "\n",
              "         Volume  \n",
              "0      19853900  \n",
              "1      29254900  \n",
              "2      28297600  \n",
              "3      22086800  \n",
              "4      25015300  \n",
              "..          ...  \n",
              "346   9,162,900  \n",
              "347  16,066,200  \n",
              "348  12,027,400  \n",
              "349  16,410,500  \n",
              "350  11,530,400  \n",
              "\n",
              "[351 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-235a63e9-583d-47ff-ad69-f5eb4db4bc14\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj_Close</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2022-04-05</td>\n",
              "      <td>42.959999</td>\n",
              "      <td>43.16</td>\n",
              "      <td>41.32</td>\n",
              "      <td>41.419998</td>\n",
              "      <td>41.023865</td>\n",
              "      <td>19853900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2022-04-06</td>\n",
              "      <td>40.790001</td>\n",
              "      <td>41.330002</td>\n",
              "      <td>39.48</td>\n",
              "      <td>39.5</td>\n",
              "      <td>39.122227</td>\n",
              "      <td>29254900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2022-04-07</td>\n",
              "      <td>39.290001</td>\n",
              "      <td>39.529999</td>\n",
              "      <td>37.599998</td>\n",
              "      <td>38.720001</td>\n",
              "      <td>38.349693</td>\n",
              "      <td>28297600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2022-04-08</td>\n",
              "      <td>38.349998</td>\n",
              "      <td>40.049999</td>\n",
              "      <td>38.169998</td>\n",
              "      <td>39.349998</td>\n",
              "      <td>38.973667</td>\n",
              "      <td>22086800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2022-04-11</td>\n",
              "      <td>38.810001</td>\n",
              "      <td>41.34</td>\n",
              "      <td>38.689999</td>\n",
              "      <td>40.330002</td>\n",
              "      <td>39.944294</td>\n",
              "      <td>25015300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>346</th>\n",
              "      <td>2023-04-14</td>\n",
              "      <td>34.75</td>\n",
              "      <td>35.29</td>\n",
              "      <td>34.25</td>\n",
              "      <td>34.49</td>\n",
              "      <td>34.39</td>\n",
              "      <td>9,162,900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>347</th>\n",
              "      <td>2023-04-13</td>\n",
              "      <td>34.56</td>\n",
              "      <td>34.69</td>\n",
              "      <td>33.72</td>\n",
              "      <td>34.53</td>\n",
              "      <td>34.43</td>\n",
              "      <td>16,066,200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>348</th>\n",
              "      <td>2023-04-12</td>\n",
              "      <td>35.99</td>\n",
              "      <td>36.06</td>\n",
              "      <td>34.53</td>\n",
              "      <td>34.62</td>\n",
              "      <td>34.52</td>\n",
              "      <td>12,027,400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>349</th>\n",
              "      <td>2023-04-11</td>\n",
              "      <td>35.88</td>\n",
              "      <td>35.97</td>\n",
              "      <td>35.34</td>\n",
              "      <td>35.41</td>\n",
              "      <td>35.31</td>\n",
              "      <td>16,410,500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>350</th>\n",
              "      <td>2023-04-10</td>\n",
              "      <td>34.35</td>\n",
              "      <td>35.74</td>\n",
              "      <td>34.26</td>\n",
              "      <td>35.73</td>\n",
              "      <td>35.63</td>\n",
              "      <td>11,530,400</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>351 rows × 7 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-235a63e9-583d-47ff-ad69-f5eb4db4bc14')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-235a63e9-583d-47ff-ad69-f5eb4db4bc14 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-235a63e9-583d-47ff-ad69-f5eb4db4bc14');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f76ce396-cc56-4c47-9910-cc85d78aee4a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f76ce396-cc56-4c47-9910-cc85d78aee4a')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const charts = await google.colab.kernel.invokeFunction(\n",
              "          'suggestCharts', [key], {});\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f76ce396-cc56-4c47-9910-cc85d78aee4a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Z3pg1LOmRw-8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pip install psycopg2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xqacIfe47ECN",
        "outputId": "fdb20e15-88c9-48f9-da4a-bdbf8d29fa22"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: psycopg2 in /usr/local/lib/python3.10/dist-packages (2.9.7)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import psycopg2\n",
        "\n",
        "db_params = {\n",
        "    \"host\": \"data-sandbox.c1tykfvfhpit.eu-west-2.rds.amazonaws.com\",\n",
        "    \"database\": \"pagila\",\n",
        "    \"user\": \"de8_saur34\",\n",
        "    \"password\": \"NGdoz73(\",\n",
        "    \"port\": \"5432\"\n",
        "}"
      ],
      "metadata": {
        "id": "v4VORZ0VR6HM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "conn = psycopg2.connect(**db_params)"
      ],
      "metadata": {
        "id": "ylkTGY6kR-CM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n"
      ],
      "metadata": {
        "id": "F8-LF1Q_SAB0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "schema = 'student'\n",
        "\n",
        "SK_TSLA_stocks = f\"\"\"\n",
        "    CREATE TABLE {schema}.SK_TSLA_stocks(\n",
        "      Date date,\n",
        "      Open VARCHAR(100),\n",
        "      High VARCHAR(100),\n",
        "      Low VARCHAR(100),\n",
        "      Close VARCHAR(100),\n",
        "      Adj_Close VARCHAR(100),\n",
        "      Volume VARCHAR(100)\n",
        "    )\n",
        "\"\"\";\n",
        "\n",
        "SK_BMW_stocks = f\"\"\"\n",
        "    CREATE TABLE {schema}.SK_BMW_stocks(\n",
        "      Date date,\n",
        "      Open VARCHAR(100),\n",
        "      High VARCHAR(100),\n",
        "      Low VARCHAR(100),\n",
        "      Close VARCHAR(100),\n",
        "      Adj_Close VARCHAR(100),\n",
        "      Volume VARCHAR(100)\n",
        "    )\n",
        "\"\"\";\n",
        "SK_MBG_stocks = f\"\"\"\n",
        "    CREATE TABLE {schema}.SK_MBG_stocks(\n",
        "      Date date,\n",
        "      Open VARCHAR(100),\n",
        "      High VARCHAR(100),\n",
        "      Low VARCHAR(100),\n",
        "      Close VARCHAR(100),\n",
        "      Adj_Close VARCHAR(100),\n",
        "      Volume VARCHAR(100)\n",
        "    )\n",
        "\"\"\";\n",
        "\n",
        "SK_GM_stocks = f\"\"\"\n",
        "    CREATE TABLE {schema}.SK_GM_stocks(\n",
        "      Date date,\n",
        "      Open VARCHAR(100),\n",
        "      High VARCHAR(100),\n",
        "      Low VARCHAR(100),\n",
        "      Close VARCHAR(100),\n",
        "      Adj_Close VARCHAR(100),\n",
        "      Volume VARCHAR(100)\n",
        "    )\n",
        "\"\"\";\n",
        "\n",
        "try:\n",
        "    connection = psycopg2.connect(**db_params)\n",
        "\n",
        "\n",
        "    cursor = connection.cursor()\n",
        "\n",
        "    # Execute the create table query\n",
        "    cursor.execute(SK_TSLA_stocks)\n",
        "    cursor.execute(SK_BMW_stocks)\n",
        "    cursor.execute(SK_MBG_stocks)\n",
        "    cursor.execute(SK_GM_stocks)\n",
        "\n",
        "    # Commit the transaction\n",
        "    connection.commit()\n",
        "\n",
        "    print(\"Table created successfully!\")\n",
        "\n",
        "except (Exception, psycopg2.Error) as error:\n",
        "    print(\"Error creating table:\", error)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XlIT7zRrSKL7",
        "outputId": "6a8c70a3-6091-46d2-985f-a43dc9c51c8a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Error creating table: relation \"sk_tsla_stocks\" already exists\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataframes = [dataset_1, dataset_2,dataset_3,dataset_4]"
      ],
      "metadata": {
        "id": "a_4kKT-LF7cK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "AwVduEGtykdL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import time\n",
        "import psycopg2\n",
        "\n",
        "def insert_data_to_database(dataframes):\n",
        "    # Database connection parameters\n",
        "    db_params = {\n",
        "        \"host\": \"data-sandbox.c1tykfvfhpit.eu-west-2.rds.amazonaws.com\",\n",
        "        \"database\": \"pagila\",\n",
        "        \"user\": \"de8_saur34\",\n",
        "        \"password\": \"NGdoz73(\",\n",
        "        \"port\": \"5432\"  # Default PostgreSQL port is 5432\n",
        "    }\n",
        "\n",
        "    # Establish a connection to the database\n",
        "    connection = psycopg2.connect(**db_params)\n",
        "\n",
        "    try:\n",
        "        # Create a cursor to interact with the database\n",
        "        cursor = connection.cursor()\n",
        "\n",
        "        table_names = [\"SK_TSLA_stocks\", \"SK_BMW_stocks\", \"SK_MBG_stocks\", \"SK_GM_stocks\"]\n",
        "        for df, table_name in zip(dataframes, table_names):\n",
        "          for index, row in df.iterrows():\n",
        "            cursor.execute(f\"INSERT INTO {table_name} (Date, Open, High, Low, Close, Adj_Close, Volume) VALUES (%s, %s, %s, %s, %s, %s, %s)\",\n",
        "                       (row['Date'], row['Open'], row['High'], row['Low'], row['Close'], row['Adj_Close'], row['Volume']))\n",
        "\n",
        "\n",
        "        # Commit the changes\n",
        "        connection.commit()\n",
        "\n",
        "    except psycopg2.Error as e:\n",
        "        print(\"An error occurred:\", e)\n",
        "        # Rollback the transaction\n",
        "        connection.rollback()\n",
        "\n",
        "    finally:\n",
        "        # Close the cursor and connection\n",
        "        cursor.close()\n",
        "        connection.close()\n",
        "\n",
        "\n",
        "# Call the function with your list of dataframes\n",
        "dataframes_list = [dataset_1, dataset_2, dataset_3, dataset_4]  # Replace with your list of DataFrames\n",
        "insert_data_to_database(dataframes_list)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 355
        },
        "id": "EltV1eS4IKDx",
        "outputId": "fb72c814-14a4-4c4f-ae7a-84f2cee83b90"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-21-6bf2c0976e03>\u001b[0m in \u001b[0;36m<cell line: 44>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     42\u001b[0m \u001b[0;31m# Call the function with your list of dataframes\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m \u001b[0mdataframes_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mdataset_1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdataset_2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdataset_3\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdataset_4\u001b[0m\u001b[0;34m]\u001b[0m  \u001b[0;31m# Replace with your list of DataFrames\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 44\u001b[0;31m \u001b[0minsert_data_to_database\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataframes_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-21-6bf2c0976e03>\u001b[0m in \u001b[0;36minsert_data_to_database\u001b[0;34m(dataframes)\u001b[0m\n\u001b[1;32m     22\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtable_name\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdataframes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtable_names\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m           \u001b[0;32mfor\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrow\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miterrows\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 24\u001b[0;31m             cursor.execute(f\"INSERT INTO {table_name} (Date, Open, High, Low, Close, Adj_Close, Volume) VALUES (%s, %s, %s, %s, %s, %s, %s)\",\n\u001b[0m\u001b[1;32m     25\u001b[0m                        (row['Date'], row['Open'], row['High'], row['Low'], row['Close'], row['Adj_Close'], row['Volume']))\n\u001b[1;32m     26\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.10/encodings/utf_8.py\u001b[0m in \u001b[0;36mdecode\u001b[0;34m(input, errors)\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0mencode\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcodecs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mutf_8_encode\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m \u001b[0;32mdef\u001b[0m \u001b[0mdecode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'strict'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mcodecs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mutf_8_decode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def convert_columns_to_numeric(dataframe):\n",
        "    for col in dataframe.columns[1:]:\n",
        "        dataframe[col] = pd.to_numeric(dataframe[col].str.replace(',', ''), errors='coerce')\n",
        "    return dataframe\n"
      ],
      "metadata": {
        "id": "qwdai66W-XIN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "cO1ppQau-XAF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for i, df in enumerate(dataframes):\n",
        "    dataframes[i] = convert_columns_to_numeric(df)"
      ],
      "metadata": {
        "id": "6IE-5oUv-W5t"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def value_plot(dataframes,x, y, figscale=1):\n",
        "    plt.figure(figsize=(8 * figscale, 4 * figscale))\n",
        "\n",
        "    for idx, df in enumerate(dataframes, start=1):\n",
        "        plt.plot(df[x], df[y], label=f'Dataset {idx}')\n",
        "\n",
        "    plt.title(f'Plot of {x} vs {y}')\n",
        "    plt.xlabel('Date')\n",
        "    plt.ylabel(y)\n",
        "    plt.legend()\n",
        "    plt.gca().spines[['top', 'right']].set_visible(False)\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "\n",
        "value_plot(dataframes_list, 'Date', 'Open', figscale=1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 407
        },
        "id": "FnK7dUkoEWuK",
        "outputId": "35ac8502-312f-47cd-d8d6-2dbfa9b0bd76"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def scatter_plot(dataframes, x, y, figscale=1):\n",
        "    plt.figure(figsize=(8 * figscale, 4 * figscale))\n",
        "\n",
        "    for idx, df in enumerate(dataframes, start=1):\n",
        "        plt.scatter(df[x], df[y], label=f'Dataset {idx}')\n",
        "\n",
        "    plt.title(f'Scatter Plot of {x} vs {y}')\n",
        "    plt.xlabel(x)\n",
        "    plt.ylabel(y)\n",
        "    plt.legend()\n",
        "    plt.gca().spines[['top', 'right']].set_visible(False)\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "\n",
        "scatter_plot(dataframes_list, 'Date', 'Open', figscale=1)\n",
        "scatter_plot(dataframes_list, 'Date', 'High', figscale=1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 797
        },
        "id": "uTlixYz9vizc",
        "outputId": "fa14400a-caa0-4e93-f85d-7e513fe847d6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def bar_chart(dataframes, x, y, figscale=1):\n",
        "    plt.figure(figsize=(8 * figscale, 6 * figscale))\n",
        "\n",
        "    for idx, df in enumerate(dataframes, start=1):\n",
        "        plt.bar(df[x], df[y], label=f'Dataset {idx}')\n",
        "\n",
        "    plt.title(f'Bar Chart of {y} vs {x}')\n",
        "    plt.xlabel(x)\n",
        "    plt.ylabel(y)\n",
        "    plt.legend()\n",
        "    plt.gca().spines[['top', 'right']].set_visible(False)\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "bar_chart(dataframes_list, 'Date', 'Adj_Close', figscale=1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "GzEYqDn2S5yU",
        "outputId": "46fb8f04-7257-45e6-b3e0-ba7b02afe16a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "def violin_plot(dataframes, y, figscale=1):\n",
        "    plt.figure(figsize=(8 * figscale, 6 * figscale))\n",
        "\n",
        "    data = [df[y] for df in dataframes]\n",
        "    labels = [f'Dataset {idx+1}' for idx in range(len(dataframes))]\n",
        "\n",
        "    sns.violinplot(data=data, inner='box', scale='width')\n",
        "    plt.xticks(range(1, len(dataframes) + 1), labels)\n",
        "\n",
        "    plt.title(f'Violin Plot of {y}')\n",
        "    plt.xlabel('Dataset')\n",
        "    plt.ylabel(y)\n",
        "    plt.gca().spines[['top', 'right']].set_visible(False)\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "violin_plot(dataframes_list, 'High', figscale=1)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "rdasPB4hdoiE",
        "outputId": "4a48229e-e416-43fe-ad03-70d5cb623f47"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "-_wvdlZmqy9e"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "vJHF6wdur2fJ"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
